#include <bits/stdc++.h> 
using namespace std; 
 
#include <iostream>

struct Node {
    int key;
    Node* left;
    Node* right;

    Node(int value) : key(value), left(nullptr), right(nullptr) {}
};
class BinarySearchTree {
public:
    Node* root;
    Node* insertRecursive(Node* current, int key) {
        if (current == nullptr) {
            return new Node(key);
        }

        if (key < current->key) {
            current->left = insertRecursive(current->left, key);
        } else if (key > current->key) {
            current->right = insertRecursive(current->right, key);
        }

        return current;
    }

    bool searchRecursive(Node* current, int key) {
        if (current == nullptr) {
            return false;
        }

        if (key == current->key) {
            return true;
        } else if (key < current->key) {
            return searchRecursive(current->left, key);
        } else {
            return searchRecursive(current->right, key);
        }
    }

    BinarySearchTree() : root(nullptr) {}
    void insert(int key) {
        root = insertRecursive(root, key);
    }

    bool search(int key) {
        return searchRecursive(root, key);
    }
};
void solve(){
    int n;
    cin>>n;
    int arr[n];
    BinarySearchTree bst;
    for(int i=0; i<n; i++){
        cin>>arr[i];
            bst.insert(arr[i]);
    }
    int res = 0;
    Node* current = bst.root;
    while(current!=nullptr){
        if(current->left!=nullptr){
            res = 0;
        }
        res+=1;
        current = current->right;
    }
    cout<<n-res<<endl;
}

int main(){
    int t;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}